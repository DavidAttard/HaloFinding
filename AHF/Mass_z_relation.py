# Plots the mass as a function of redshift following merger trees generated by AHF

import os
import re
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

def mass_history(halo_id):
    
    halo_id = halo_id
    z = []
    mass = []

    # Number of snapshots inclussive of snapshot 0 (i.e. if you have from file 000-127 than snaps=128)
    snaps = 128

    for i in range(snaps - 1, -1, -1):
        full_path = "/p/project/hestiaeor/david/hestiaeor/AHF_4096/{0:03d}/halos/".format(i)
        
        # getting the path of the "*_halos" file
        for filename in os.listdir(full_path):
            # Check if the file name ends with "_halos"
            if filename.endswith("_halos"):
                # Construct the full file path
                file_path = os.path.join(full_path, filename)

                # Code to extract redshift from the input file name 
                pattern = re.compile(r'z(\d+\.\d+)')
                match = re.search(pattern, file_path)
                if match:
                    z_file = float(match.group(1))  # Convert to float

        print(z_file)

        # Loading the "*_halos" file
        df = pd.read_csv(file_path, delim_whitespace=True)

        # Selecting the data for halo i
        halo_data = df[df['#ID(1)'] == halo_id]['Mhalo(4)']
        
        if not halo_data.empty:
            mass = np.append(mass, halo_data)
            print(halo_data)
            z = np.append(z, z_file)

        # Saving the halo mass at z=0
        if i == snaps-1:
            M_0 = int(df[df['#ID(1)'] == halo_id]['Mhalo(4)'].iloc[0])
        
        # Obtaining the halo id of the halo we're analysing in the past snaps using merger tree information 
        if i != 0:
            mergertree_path = "/p/project/hestiaeor/david/hestiaeor/MergerTree_4096/Trees/{0:03d}/test_mtree_idx".format(i)

            df = pd.read_csv(mergertree_path, delim_whitespace=True)    

            value_of_first_column = halo_id  # Replace with the actual value you are looking for

            # Filter DataFrame based on the value of the first column
            filtered_df = df[df.iloc[:, 0] == value_of_first_column]

            # Extract the value from the second column
            if not filtered_df.empty:
                value_of_second_column = filtered_df.iloc[0, 1]
                halo_id = value_of_second_column


    return z, mass, M_0

#Halo1
z1, mass1, M0_1 = mass_history(2)
z2, mass2, M0_2 = mass_history(3)

# Save z and mass arrays to a file
np.savez('z_mass_data.npz', z=z1, mass=mass1)

# Plot using loaded data
plt.plot(z1, mass1/M0_1, label = 'HaloID=2 (M31)')
plt.plot(z2, mass2/M0_2, label = 'HaloID=3 (MW)')
plt.xscale('symlog')
plt.xlabel("z")
plt.ylabel(r"$\mathrm{M}/\mathrm{M}_{0}$")
plt.legend()
plt.title('Merger History')
plt.savefig('Mass_z_relation.png')
